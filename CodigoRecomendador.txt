g = new Neo4jGraph('/tmp/gameRatingsTest3')
g.dropIndex("edges")
g.setMaxBufferSize(100)
 
consoles = [0:'pc', 1:'ps4', 2:'xbone',
  3:'wiiu']

//JUEGOS
new File('games.dat').eachLine {def line ->
  def components = line.split('::');
  def gameVertex = g.addVertex(['type':'Game', 'gameId':components[0].toInteger(), 'title':components[1]]);
  components[2].split('\\|').each { def genera ->
    def hits = g.idx(T.v)[[genera:genera]].iterator();
    def generaVertex = hits.hasNext() ? hits.next() : g.addVertex(['type':'Genera', 'genera':genera]);
    g.addEdge(gameVertex, generaVertex, 'hasGenera');
  }
}


//USUARIOS
new File('users.dat').eachLine {def line ->
  def components = line.split('::');
  def userVertex = g.addVertex(['type':'User', 'userId':components[0].toInteger(), 'age':components[1].toInteger()]);
  def console = consoles[components[2].toInteger()];
  def hits = g.idx(T.v)[[console:console]].iterator();
  def consoleVertex = hits.hasNext() ? hits.next() : g.addVertex(['type':'Console', 'console':console]);
  g.addEdge(userVertex, consoleVertex, 'hasConsole');
}

//RATINGS
new File('ratings.dat').eachLine {def line ->
  def components = line.split('::');
  def ratedEdge = g.addEdge(g.idx(T.v)[[userId:components[0].toInteger()]].next(), g.idx(T.v)[[gameId:components[1].toInteger()]].next(), 'rated');
  ratedEdge.setProperty('stars', components[2].toInteger());
}

g.stopTransaction(TransactionalGraph.Conclusion.SUCCESS) //Solo cuando agrego info, para el proceso.

//Ver distribucion de consolas.
m = [:]           
g.V[[type:'User']].out('hasConsole').console.groupCount(m) >> -1
m.sort{a,b -> b.value <=> a.value}

//Collaborative Filtering con Juego: A Boy and His Blob.

v = g.idx(T.v)[[title:'A Boy and His Blob']] >> 1

v.inE('rated').filter{it.getProperty('stars') > 3}.outV.userId[0..4]

v.inE('rated').filter{it.getProperty('stars') > 3}.outV.outE('rated').filter{it.getProperty('stars') > 3}.inV.title[0..4]


//Detener Programa.
g.shutdown()